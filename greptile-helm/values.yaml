# Global configuration
global:
  environment: "development"
  ecr:
    # Leave at greptileai if pulling images from private Docker Hub
    registry: "greptileai"
  org:
    name: "greptile"
    tenant: "default"
  greptile:
    learnProceduralMemory: true
  externalUrl: ""
  # [Optional] GitHub Authentication Configuration
  authGithubId: ""
  authGithubSecret: ""
  tolerations:
    - key: "tolerationKey"
      operator: "Equal"
      value: "greptile"
      effect: "NoExecute"
  # Uncomment below to enable nodeSelector
  # nodeSelector:
  #   nodeSelectorKey: "greptile"
  
  # AI Model Configuration
  ai:
    # Privacy and compliance controls
    disableLlmLogging: false  # Set to true to disable LLM request/response logging for privacy compliance
    
    anthropic:
      baseUrl: "https://anthropic.helicone.ai"
    openai:
      apiBaseUrl: "https://oai.hconeai.com/v1"
    azure:
      openaiUrl: "https://onboardai.openai.azure.com/"
      openaiSummarizerDeploymentName: "gpt-4o-mini"
      openaiEmbeddingsDeploymentName: "text-embedding-ada-002"
      openaiSummarizerApiVersion: "2024-07-18"
      openaiEmbeddingsApiVersion: "2"
    
    # Model Provider Configuration
    refiner:
      modelProvider: "anthropic"
      model: "claude-sonnet-4-20250514"
    chat:
      modelProvider: "anthropic"
      model: "claude-sonnet-4-20250514"
    memory:
      chatModelProvider: "anthropic"
      chatModel: "claude-sonnet-4-20250514"
    summarizer:
      modelProvider: "azure"
      model: "gpt-4o-mini"
    embeddings:
      model: "text-embedding-ada-002"
      modelProvider: "azure"
    agent:
      modelProvider: "openai"
      model: "gpt-4o-mini"
    oauthGateway:
      # OPTIONAL only required if using an OAuth server to generate a token
      endpoint: "" # "http://endpoint/oauth/api/v1/"
      scope: "" # "awsanthropic-readwrite azureopenai-readwrite"
      clientId: "" # "your_client_id"

# Database configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "postgres"
    database: "postgres"
  primary:
    persistence:
      enabled: true
      size: 5Gi
      storageClass: ""
    service:
      type: ClusterIP
      port: 5432
    tolerations:
      - key: "tolerationKey"
        operator: "Equal"
        value: "greptile"
        effect: "NoExecute"
    # Uncomment below to enable nodeSelector
    # nodeSelector:
    #   nodeSelectorKey: "greptile"
  tls:
    enabled: true
    autoGenerated: true
  pgvector:
    enabled: true

# Redis configuration
redis:
  enabled: false
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 2Gi
    service:
      type: ClusterIP
      port: 6379
    tolerations:
      - key: "tolerationKey"
        operator: "Equal"
        value: "greptile"
        effect: "NoExecute"
    # Uncomment below to enable nodeSelector
    # nodeSelector:
    #   nodeSelectorKey: "greptile"

# Migration jobs
migrations:
  db:
    enabled: true
    image:
      repository: "db-migration"
      tag: "0.3.0-dev-build"
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: "500m"
        memory: "1Gi"
      requests:
        cpu: "200m"
        memory: "512Mi"
  vectordb:
    enabled: true
    image:
      repository: "vectordb-migration"
      tag: "0.3.0-dev-build"
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: "500m"
        memory: "1Gi"
      requests:
        cpu: "200m"
        memory: "512Mi"

# Greptile Services
web:
  enabled: true
  replicaCount: 1
  image:
    repository: "web"
    tag: "0.3.0-dev-build"
    pullPolicy: IfNotPresent
  service:
    type: NodePort  # Change according to your environment
    port: 3000
    nodePort: 30000
  resources:
    limits:
      cpu: "1000m"
      memory: "2Gi"
    requests:
      cpu: "500m"
      memory: "1Gi"
  config:
    externalUrl: "http://127.0.0.1:3000"  # This has to be set to the public IP:port that the Web service will use
    authSamlOnly: "false" # set to true if you want to only authenticate via SAML
    globalGitlabBaseUrl: ""  # This will be your gitlab base url http://your_gitlab.your_company.com
    skipCompanyOnboarding: "" #"true"  # Skips the company onboarding questions for new users
    defaultCodeProvider: "" # "gitlab"

auth:
  enabled: true
  replicaCount: 1
  image:
    repository: "auth"
    tag: "0.3.0-dev-build"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3001
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"

api:
  enabled: true
  replicaCount: 1
  image:
    repository: "api"
    tag: "0.3.0-dev-build"
    pullPolicy: IfNotPresent
  service:
    type: NodePort
    port: 3002
    nodePort: 30002
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"


# Indexer services with reduced resources
indexer:
  chunker:
    enabled: true
    replicaCount: 1
    image:
      repository: "chunker"
      tag: "0.3.0-dev-build"
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      port: 3003
    resources:
      limits:
        cpu: "1"
        memory: "2Gi"
      requests:
        cpu: "500m"
        memory: "1Gi"
    config:
      parentDir: "/mnt/data/"
      nodeEnv: ""
  
  summarizer:
    enabled: true
    replicaCount: 1
    image:
      repository: "summarizer"
      tag: "0.3.0-dev-build"
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      port: 3004
    resources:
      limits:
        cpu: "1"
        memory: "2Gi"
      requests:
        cpu: "500m"
        memory: "1Gi"
    config:
      parentDir: "/mnt/data/"

webhook:
  enabled: true
  replicaCount: 1
  image:
    repository: "webhook"
    tag: "0.3.0-dev-build"
    pullPolicy: IfNotPresent
  service:
    # Has to be exposed for github/gitlab webhooks to be received
    type: NodePort
    port: 3007
    nodePort: 30007
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"

reviews:
  enabled: true
  replicaCount: 1
  image:
    repository: "reviews"
    tag: "0.3.0-dev-build"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3005
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
  config:
    includeIssuesTable: false
    includeSequenceDiagram: false
    includeConfidenceScore: false

jobs:
  enabled: true
  replicaCount: 1
  image:
    repository: "jobs"
    tag: "0.3.0-dev-build"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8080
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
  config:
    openaiApiVersion: "2024-08-01-preview"

jackson:
  enabled: false
  replicaCount: 1
  image:
    repository: "boxyhq/jackson"
    tag: "1.29.0"
    pullPolicy: IfNotPresent
  service:
    type: LoadBalancer
    port: 5225
    nodePort: 5225
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  config:
      dbEngine: "sql"
      dbType: "postgres"
      externalUrl: "http://localhost:5225"

# Shared storage
storage:
  createStorageClass: true
  sharedMount:
    enabled: true
    size: 10Gi
    storageClass: ""

# Ingress configuration for generic access
ingress:
  enabled: false
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  hosts:
    - host: greptile.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Development secrets (use proper secrets in production)
secrets:
  # IMPORTANT: jwtSecret and authSecret needs to be the same value (randomly generated string)
  jwtSecret: "dummy-secret-key"
  authSecret: "dummy-secret-key"
  tokenEncryptionKey: "dummy-token-encryption-key"
  hatchetClientToken: "dummy-hatchet-client-token"
  githubWebhookSecret: "dummy-github-webhook-secret"
  githubPrivateKey: "dummy-github-private-key"
  webhookSecret: "dummy-webhook-secret"
  anthropicKey: "dummy-anthropic-key"
  openaiKey: "dummy-openai-key"
  azureOpenaiKey: "dummy-azure-openai-key"
  globalGitlabToken: ""  # Set to a service account token / group access token if GitLab integration is needed
  oauthGatewayClientSecret: "" # Only required if using an oauthGateway for generating LLM keys
  # [OPTIONAL] Jackson secrets
  jacksonApiKeys: "secret"
  nextauthAdminCredentials: "admin@company.com:secretpassword" 

# Required for pulling images from Docker Hub
imagePullSecrets:
  - name: regcred
