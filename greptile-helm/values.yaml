# Global configuration
global:
  environment: "development"
  ecr:
    # Leave at greptileai if pulling images from private Docker Hub
    registry: "greptileai"
  org:
    name: "greptile"
    tenant: "default"
  greptile:
    learnProceduralMemory: true
    email:
      # Email provider: SES or SMTP
      provider: "SES"
      # From email address
      from: "noreply@greptile.com"
      # SMTP configuration (only used when provider is "SMTP")
      smtp:
        host: ""
        port: 587
        user: ""
        password: ""
        secure: false  # true for port 465 (SSL), false for 587/25
        tls: true     # true to enable STARTTLS
        rejectUnauthorized: true  # false to allow self-signed certificates
      # AWS SES configuration (only used when provider is "SES")
      ses:
        accessKeyId: ""
        secretAccessKey: ""
  externalUrl: ""
  # [Optional] GitHub Authentication Configuration
  authGithubId: ""
  authGithubSecret: ""
  tolerations:
    - key: "tolerationKey"
      operator: "Equal"
      value: "greptile"
      effect: "NoExecute"
  defaultTriggerOnUpdates: false
  # Uncomment below to enable nodeSelector
  # nodeSelector:
  #   nodeSelectorKey: "greptile"
  
  # AI Model Configuration
  ai:
    # Privacy and compliance controls
    disableLlmLogging: false  # Set to true to disable LLM request/response logging for privacy compliance
    
    anthropic:
      baseUrl: "https://anthropic.helicone.ai"
    openai:
      apiBaseUrl: "https://oai.hconeai.com/v1"
    azure:
      openaiUrl: "https://onboardai.openai.azure.com/"
      openaiSummarizerDeploymentName: "gpt-4o-mini"
      openaiEmbeddingsDeploymentName: "text-embedding-ada-002"
      openaiSummarizerApiVersion: "2024-07-18"
      openaiEmbeddingsApiVersion: "2"
    
    # Model Provider Configuration
    refiner:
      modelProvider: "anthropic"
      model: "claude-sonnet-4-20250514"
    chat:
      modelProvider: "anthropic"
      model: "claude-sonnet-4-20250514"
    memory:
      chatModelProvider: "anthropic"
      chatModel: "claude-sonnet-4-20250514"
    summarizer:
      modelProvider: "azure"
      model: "gpt-4o-mini"
    embeddings:
      model: "text-embedding-ada-002"
      modelProvider: "azure"
    agent:
      modelProvider: "openai"
      model: "gpt-4o-mini"
    oauthGateway:
      # OPTIONAL only required if using an OAuth server to generate a token
      endpoint: "" # "http://endpoint/oauth/api/v1/"
      scope: "" # "awsanthropic-readwrite azureopenai-readwrite"
      clientId: "" # "your_client_id"

  # Optional Perforce/Swarm configuration
  perforce:
    p4user: ""
    p4passwd: ""
    p4port: ""
    p4client: ""
    p4childPaths: ""
    swarmUrl: ""

  # Optional Greptile Admin Key
  greptileAdminKey: ""

# Database configuration
postgresql:
  enabled: true
  auth:
    username: "postgres"
    postgresPassword: "postgres"
    database: "postgres"
  primary:
    # resources:
    #   requests:
    #     cpu: 2
    #     memory: 8Gi
    #   limits:
    #     cpu: 4
    #     memory: 16Gi
    persistence:
      enabled: true
      size: 5Gi
      storageClass: ""
    service:
      type: ClusterIP
      port: 5432
    tolerations:
      - key: "tolerationKey"
        operator: "Equal"
        value: "greptile"
        effect: "NoExecute"
    extendedConfiguration: |-
      max_connections = 155
      statement_timeout = 120000                  # 2 min
      idle_in_transaction_session_timeout = 300000 # 5 min
      lock_timeout = 5000                         # 5 s
      idle_session_timeout = 600000               # 10 min
    # Uncomment below to enable nodeSelector
    # nodeSelector:
    #   nodeSelectorKey: "greptile"
  tls:
    enabled: true
    autoGenerated: true
  pgvector:
    enabled: true

pgbouncer:
  enabled: true
  replicaCount: 1
  service:
    type: ClusterIP
    port: 5432
  config:
    adminPassword: "<your_admin_pw>"
    databases:
      postgres:
        host: greptile-postgresql
        port: 5432
        dbname: postgres
      vector:
        host: greptile-postgresql
        port: 5432
        dbname: vector
    pgbouncer:
      server_tls_sslmode: prefer
      ignore_startup_parameters: search_path,extra_float_digits
      pool_mode: transaction
      auth_type: scram-sha-256
      max_client_conn: 1000
      max_db_connections: 150
      default_pool_size: 75
      log_connections: 0 # for debugging
      log_disconnections: 0 # for debugging
      log_pooler_errors: 1
      application_name_add_host: 1
      # Timeouts
      query_timeout: 300              # unlimited (optional safety: 300s)
      idle_transaction_timeout: 600   # close long idle txs
      server_idle_timeout: 600
      client_idle_timeout: 600
      server_connect_timeout: 15
      server_login_retry: 10
    userlist:
      # Fill out by running SELECT usename, passwd FROM pg_shadow WHERE usename = 'postgres'; inside postgres
      postgres: SCRAM-SHA-256$....

# Redis configuration
redis:
  enabled: false
  architecture: standalone
  auth:
    enabled: false
    # If enabled and password set, it will be used as REDIS_PASSWORD secret
    password: ""
  master:
    persistence:
      enabled: true
      size: 2Gi
    service:
      type: ClusterIP
      port: 6379
    tolerations:
      - key: "tolerationKey"
        operator: "Equal"
        value: "greptile"
        effect: "NoExecute"
    # Uncomment below to enable nodeSelector
    # nodeSelector:
    #   nodeSelectorKey: "greptile"

# Migration jobs
migrations:
  db:
    enabled: true
    image:
      repository: "db-migration"
      tag: "0.3.0-dev-build"
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: "500m"
        memory: "1Gi"
      requests:
        cpu: "200m"
        memory: "512Mi"
  vectordb:
    enabled: true
    image:
      repository: "vectordb-migration"
      tag: "0.3.0-dev-build"
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: "500m"
        memory: "1Gi"
      requests:
        cpu: "200m"
        memory: "512Mi"

# Greptile Services
web:
  enabled: true
  replicaCount: 1
  image:
    repository: "web"
    tag: "0.3.0-dev-build"
    pullPolicy: IfNotPresent
  service:
    type: NodePort  # Change according to your environment
    port: 3000
    nodePort: 30000
  resources:
    limits:
      cpu: "1000m"
      memory: "2Gi"
    requests:
      cpu: "500m"
      memory: "1Gi"
  config:
    externalUrl: "http://127.0.0.1:3000"  # This has to be set to the public IP:port that the Web service will use
    authSamlOnly: "false" # set to true if you want to only authenticate via SAML
    globalGitlabBaseUrl: ""  # This will be your gitlab base url http://your_gitlab.your_company.com
    skipCompanyOnboarding: "" #"true"  # Skips the company onboarding questions for new users
    defaultCodeProvider: "" # "gitlab"

auth:
  enabled: true
  replicaCount: 1
  image:
    repository: "auth"
    tag: "0.3.0-dev-build"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3001
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"

api:
  enabled: true
  replicaCount: 1
  image:
    repository: "api"
    tag: "0.3.0-dev-build"
    pullPolicy: IfNotPresent
  service:
    type: NodePort
    port: 3002
    nodePort: 30002
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"


# Indexer services with reduced resources
indexer:
  chunker:
    enabled: true
    replicaCount: 1
    image:
      repository: "chunker"
      tag: "0.3.0-dev-build"
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      port: 3003
    resources:
      limits:
        cpu: "1"
        memory: "2Gi"
      requests:
        cpu: "500m"
        memory: "1Gi"
    config:
      parentDir: "/mnt/data/"
      nodeEnv: ""
  
  summarizer:
    enabled: true
    replicaCount: 1
    image:
      repository: "summarizer"
      tag: "0.3.0-dev-build"
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      port: 3004
    resources:
      limits:
        cpu: "1"
        memory: "2Gi"
      requests:
        cpu: "500m"
        memory: "1Gi"
    config:
      parentDir: "/mnt/data/"

webhook:
  enabled: true
  replicaCount: 1
  image:
    repository: "webhook"
    tag: "0.3.0-dev-build"
    pullPolicy: IfNotPresent
  service:
    # Has to be exposed for github/gitlab webhooks to be received
    type: NodePort
    port: 3007
    nodePort: 30007
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"

reviews:
  enabled: true
  replicaCount: 1
  image:
    repository: "reviews"
    tag: "0.3.0-dev-build"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3005
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
  # Required for greptile v3
  storage:
    enabled: true
    size: 1Ti
    storageClass: ""
  config:
    includeSummary: true
    summaryCollapsible: false
    summaryDefaultOpen: false
    includeIssuesTable: true
    issuesTableCollapsible: false
    issuesTableDefaultOpen: false
    includeConfidenceScore: true
    confidenceScoreCollapsible: false
    confidenceScoreDefaultOpen: false
    includeSequenceDiagram: true
    sequenceDiagramCollapsible: false
    sequenceDiagramDefaultOpen: false

    updateExistingSummaryComment: false

jobs:
  enabled: true
  replicaCount: 1
  image:
    repository: "jobs"
    tag: "0.3.0-dev-build"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8080
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
  config:
    openaiApiVersion: "2024-08-01-preview"

jackson:
  enabled: false
  replicaCount: 1
  image:
    repository: "boxyhq/jackson"
    tag: "1.29.0"
    pullPolicy: IfNotPresent
  service:
    type: LoadBalancer
    port: 5225
    nodePort: 5225
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  config:
      dbEngine: "sql"
      dbType: "postgres"
      externalUrl: "http://localhost:5225"

# Shared storage
storage:
  createStorageClass: true
  sharedMount:
    enabled: true
    size: 10Gi
    storageClass: ""

# Ingress configuration for generic access
ingress:
  enabled: false
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  hosts:
    - host: greptile.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Development secrets (use proper secrets in production)
secrets:
  # IMPORTANT: jwtSecret and authSecret needs to be the same value (randomly generated string)
  jwtSecret: "dummy-secret-key"
  authSecret: "dummy-secret-key"
  tokenEncryptionKey: "dummy-token-encryption-key"
  hatchetClientToken: "dummy-hatchet-client-token"
  githubWebhookSecret: "dummy-github-webhook-secret"
  githubPrivateKey: "dummy-github-private-key"
  webhookSecret: "dummy-webhook-secret"
  anthropicKey: "dummy-anthropic-key"
  openaiKey: "dummy-openai-key"
  azureOpenaiKey: "dummy-azure-openai-key"
  # Optional: set Redis password directly; overrides redis.auth.password if provided
  redisPassword: ""
  globalGitlabToken: ""  # Set to a service account token / group access token if GitLab integration is needed
  oauthGatewayClientSecret: "" # Only required if using an oauthGateway for generating LLM keys
  # [OPTIONAL] Jackson secrets
  jacksonApiKeys: "secret"
  nextauthAdminCredentials: "admin@company.com:secretpassword" 

# Required for pulling images from Docker Hub
imagePullSecrets:
  - name: regcred
