{{- if .Values.migrations.db.enabled }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "greptile.fullname" . }}-db-migration
  labels:
    {{- include "greptile.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade  
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  backoffLimit: 1
  template:
    metadata:
      name: {{ include "greptile.fullname" . }}-db-migration
      labels:
        {{- include "greptile.labels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      containers:
        - name: db-migration
          image: {{ include "greptile.image" (dict "Values" .Values "repository" .Values.migrations.db.image.repository "tag" .Values.migrations.db.image.tag) }}
          imagePullPolicy: {{ .Values.migrations.db.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              cd /app/packages/db
              echo "Starting migration..."
              
              # Wait for PostgreSQL to be ready
              echo "Waiting for PostgreSQL to be ready..."
              until nc -z greptile-postgresql 5432; do
                echo "PostgreSQL not ready yet, waiting..."
                sleep 5
              done
              echo "PostgreSQL is ready!"
              
              # Try to create database, but don't fail if it already exists
              pnpm prisma db execute --file ./scripts/create.sql --url "$DATABASE_URL" || echo "Database may already exist, continuing..."
              pnpm prisma db execute --file ./scripts/hatchet.sql --url "$DATABASE_URL"
              if pnpm prisma migrate deploy --schema=./prisma/schema.prisma; then
                echo "Migration completed successfully"
                API_KEY=$(openssl rand -hex 16)
                sed "s@\$ORG_NAME@$ORG_NAME@g; s@\$TENANT_ID@$TENANT_ID@g; s@\$API_KEY@$API_KEY@g" ./scripts/root_org.sql > /tmp/processed.sql
                cat /tmp/processed.sql | pnpm prisma db execute --stdin --url "$DATABASE_URL" || {
                  echo "Failed to execute root_org.sql"
                  cat /tmp/processed.sql
                  exit 1
                }
                exit 0
              else
                echo "Migration failed"
                exit 1
              fi
          resources:
            {{- toYaml .Values.migrations.db.resources | nindent 12 }}
          envFrom:
            - configMapRef:
                name: {{ include "greptile.fullname" . }}-common-env
          env:
            - name: ORG_NAME
              value: {{ .Values.global.org.name }}
            - name: TENANT_ID
              value: {{ .Values.global.org.tenant }}
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "greptile.fullname" . }}-secrets
                  key: DATABASE_URL
            - name: DIRECT_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "greptile.fullname" . }}-secrets
                  key: DATABASE_URL
{{- end }}

{{- if .Values.migrations.vectordb.enabled }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "greptile.fullname" . }}-vectordb-migration
  labels:
    {{- include "greptile.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade  
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  backoffLimit: 1
  template:
    metadata:
      name: {{ include "greptile.fullname" . }}-vectordb-migration
      labels:
        {{- include "greptile.labels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      containers:
        - name: vectordb-migration
          image: {{ include "greptile.image" (dict "Values" .Values "repository" .Values.migrations.vectordb.image.repository "tag" .Values.migrations.vectordb.image.tag) }}
          imagePullPolicy: {{ .Values.migrations.vectordb.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              cd /app/packages/vector
              echo "Starting vector migration..."
              
              # Wait for PostgreSQL to be ready
              echo "Waiting for PostgreSQL to be ready..."
              until nc -z greptile-postgresql 5432; do
                echo "PostgreSQL not ready yet, waiting..."
                sleep 5
              done
              echo "PostgreSQL is ready!"
              
              # Try to create database, but don't fail if it already exists
              pnpm prisma db execute --file ./scripts/create.sql --url "$DATABASE_URL" || echo "Database may already exist, continuing..."
              export DATABASE_URL=$VECTOR_DB_URL
              export DIRECT_URL=$VECTOR_DB_URL
              pnpm prisma db execute --file ./scripts/pgvector.sql
              pnpm prisma migrate deploy --schema=./prisma/schema.prisma
              echo "Vector migration completed."
          resources:
            {{- toYaml .Values.migrations.vectordb.resources | nindent 12 }}
          envFrom:
            - configMapRef:
                name: {{ include "greptile.fullname" . }}-common-env
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "greptile.fullname" . }}-secrets
                  key: DATABASE_URL
            - name: VECTOR_DB_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "greptile.fullname" . }}-secrets
                  key: VECTOR_DB_URL
            - name: DIRECT_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "greptile.fullname" . }}-secrets
                  key: DATABASE_URL
{{- end }} 