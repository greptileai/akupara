#!/bin/bash

# Check if Docker is accessible
if ! docker info > /dev/null 2>&1; then
    echo "Error: Cannot access Docker. Please check that:"
    echo "1. Docker is installed and running"
    echo "2. Your user has permission to access Docker (try running 'docker ps')"
    echo "3. You are a member of the 'docker' group (you can add yourself with 'sudo usermod -aG docker $USER')"
    exit 1
fi

echo "Starting Hatchet services..."

# Start only Hatchet-related services
docker compose up -d \
    postgres-hatchet \
    rabbitmq \
    migration \
    setup-config \
    hatchet-engine \
    hatchet-api \
    hatchet-frontend \
    caddy

echo "Waiting for services to be healthy..."

# Wait for PostgreSQL to be healthy
while ! docker compose ps postgres-hatchet | grep "healthy" > /dev/null; do
    echo "Waiting for PostgreSQL..."
    sleep 5
done

# Wait for RabbitMQ to be healthy
while ! docker compose ps rabbitmq | grep "healthy" > /dev/null; do
    echo "Waiting for RabbitMQ..."
    sleep 5
done

echo "All Hatchet services are up and running!"
echo "You can access the Hatchet UI at http://localhost:8080"

# Generate and save Hatchet environment variables

echo "Preparing to set Hatchet token"

# Determine target env file (.env preferred over .env.example)
if [ -f ".env" ]; then
    env_file=".env"
elif [ -f ".env.example" ]; then
    env_file=".env.example"
else
    echo "Warning: Neither .env nor .env.example found in current directory. Skipping token insertion."
    exit 0
fi

# If HATCHET_CLIENT_TOKEN already exists and has a non-empty value, do not change it
if awk -F'=' '
    /^HATCHET_CLIENT_TOKEN=/ {
        val=$2;
        for (i=3;i<=NF;i++) val=val"="$i;
        sub(/^[[:space:]]+/, "", val);
        sub(/[[:space:]]+$/, "", val);
        sub(/^"/, "", val);
        sub(/"$/, "", val);
        if (val!="") found=1
    }
    END { exit found?0:1 }
' "$env_file"; then
    echo "Existing non-empty HATCHET_CLIENT_TOKEN found in $env_file. Skipping update."
    exit 0
fi

echo "Generating Hatchet Token"
token_value="$(docker compose run --rm --no-deps setup-config /hatchet/hatchet-admin token create --config /hatchet/config --tenant-id 707d0855-80ab-4e1f-a156-f1c4546cbf52 --name auto-generated-by-greptile --expiresIn 876000h | tr -d '\r')"

if [ -z "$token_value" ]; then
    echo "Error: Failed to generate Hatchet token"
    exit 1
fi

# Insert the token and comment below HATCHET_CLIENT_TLS_STRATEGY
tmp_file="$(mktemp)"
awk -v token="$token_value" '
  BEGIN { inserted = 0 }
  # Remove any existing generated comment or token line to avoid duplicates
  /^# This token was automatically generated by Greptile$/ { next }
  /^HATCHET_CLIENT_TOKEN=/ { next }
  {
    print $0
    if ($0 ~ /^HATCHET_CLIENT_TLS_STRATEGY/) {
      print "# This token was automatically generated by Greptile"
      print "HATCHET_CLIENT_TOKEN=" token
      inserted = 1
    }
  }
  END {
    if (inserted == 0) {
      print ""
      print "# This token was automatically generated by Greptile"
      print "HATCHET_CLIENT_TOKEN=" token
    }
  }
' "$env_file" > "$tmp_file" && mv "$tmp_file" "$env_file"

echo "Inserted Hatchet token into $env_file"