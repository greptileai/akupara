version: "3.8"

services:
  postgres:
    image: pgvector/pgvector:pg15
    container_name: greptile-postgres-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 2s
      timeout: 5s
      retries: 10

  greptile_vector_db_migration:
    image: ${ECR_REGISTRY}/greptile/vectordb-migration:${TAG}
    platform: linux/amd64
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - VECTOR_DB_URL=${VECTOR_DB_URL}
      - DIRECT_URL=${DATABASE_URL}
    command: >
      /bin/sh -c '
      cd /app/packages/vector &&
      echo "Starting vector migration..." &&
      pnpm prisma db execute --file ./scripts/create.sql --url "$DATABASE_URL" &&
      export DATABASE_URL=$VECTOR_DB_URL &&
      export DIRECT_URL=$VECTOR_DB_URL &&
      pnpm prisma db execute --file ./scripts/pgvector.sql &&
      pnpm prisma migrate deploy --schema=./prisma/schema.prisma &&
      echo "Vector migration completed."'

  greptile_db_migration:
    image: ${ECR_REGISTRY}/greptile/db-migration:${TAG}
    platform: linux/amd64
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DIRECT_URL=${DATABASE_URL}
      - ORG_NAME=greptile
      - TENANT_ID=default
    command: >
      /bin/sh -c '
      cd /app/packages/db &&
      echo "Starting migration..." &&
      pnpm prisma db execute --file ./scripts/create.sql --url "$DATABASE_URL" &&
      pnpm prisma db execute --file ./scripts/hatchet.sql --url "$DATABASE_URL" &&
      if pnpm prisma migrate deploy ; then
        echo "Migration completed successfully" &&
        API_KEY=$(openssl rand -hex 16) &&
        sed "s@\$ORG_NAME@$ORG_NAME@g; s@\$TENANT_ID@$TENANT_ID@g; s@\$API_KEY@$API_KEY@g" ./scripts/root_org.sql > /tmp/processed.sql &&
        cat /tmp/processed.sql | pnpm prisma db execute --stdin --url "$DATABASE_URL" || {
          echo "Failed to execute root_org.sql" &&
          cat /tmp/processed.sql &&
          exit 1
        } &&
        exit 0
      else
        echo "Migration failed" &&
        exit 1
      fi'

  greptile_web_service:
    image: ${ECR_REGISTRY}/greptile/web:${TAG}
    platform: linux/amd64
    env_file:
      - common.env
    environment:
      # Haard coded to false for on-prem deployments
      - BILLING_ENABLED=false
    ports:
      - "3000:3000"

  greptile_auth_service:
    image: ${ECR_REGISTRY}/greptile/auth:${TAG}
    platform: linux/amd64
    env_file:
      - common.env
    environment:
      - EMAIL_FROM=${AUTH_EMAIL_FROM}
    ports:
      - "3001:3001"

  greptile_api_service:
    image: ${ECR_REGISTRY}/greptile/api:${TAG}
    platform: linux/amd64
    restart: on-failure
    env_file:
      - common.env
    environment:
      - URL=${API_URL}
      - APP_URL=${APP_URL}
      - X_AWS_REGION=${AWS_REGION}
      - PORT=3002
    ports:
      - "3002:3002"

  greptile_indexer_chunker:
    image: ${ECR_REGISTRY}/greptile/chunker:${TAG}
    platform: linux/amd64
    restart: on-failure
    env_file:
      - common.env
    environment:
      - LOG_FORMAT=json
      - PARENT_DIR=/mnt/data/
      # To prevent health checker bug
      - NODE_ENV=""
      - PORT=3003
    volumes:
      - shared-mnt:/mnt

  greptile_indexer_summarizer:
    image: ${ECR_REGISTRY}/greptile/summarizer:${TAG}
    platform: linux/amd64
    restart: on-failure
    env_file:
      - common.env
    environment:
      - LOG_FORMAT=json
      - PARENT_DIR=/mnt/data/
      - PORT=3004
    volumes:
      - shared-mnt:/mnt

  greptile_webhook_service:
    image: ${ECR_REGISTRY}/greptile/webhook:${TAG}
    platform: linux/amd64
    restart: on-failure
    env_file:
      - common.env
    environment:
      - PORT=3007
    ports:
      - "3007:3007"

  greptile_reviews_service:
    image: ${ECR_REGISTRY}/greptile/reviews:${TAG}
    platform: linux/amd64
    restart: on-failure
    env_file:
      - common.env
    environment:
      - ANALYTICS=false
      - BILLING=false
      - WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET}
      - PORT=3005
    ports:
      - "3005:3005"

  greptile_query_service:
    image: ${ECR_REGISTRY}/greptile/query:${TAG}
    platform: linux/amd64
    restart: on-failure
    env_file:
      - common.env
    environment:
      - PORT=8081
      - ONPREM=true
    ports:
      - "8081:8081"

  redis:
    image: redis
    container_name: redis-cache
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    ports:
      - "6379:6379"

  greptile_jobs_service:
    image: ${ECR_REGISTRY}/greptile/jobs:${TAG}
    platform: linux/amd64
    restart: on-failure
    env_file:
      - common.env
    environment:
      - X_AWS_REGION=${AWS_REGION}
      - NODE_ENV=production
      - PORT=8080
    ports:
      - "8086:8080"

volumes:
  pgdata: {}
  shared-mnt: {}