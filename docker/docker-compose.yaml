services:  
  # ===== HATCHET SECTION ======
  postgres-hatchet:
    image: postgres:15.6
    platform: linux/amd64
    command: postgres -c 'max_connections=200'
    restart: always
    hostname: "postgres-hatchet"
    environment:
      - POSTGRES_USER=${HATCHET_POSTGRES_USER}
      - POSTGRES_PASSWORD=${HATCHET_POSTGRES_PASSWORD}
      - POSTGRES_DB=${HATCHET_POSTGRES_DB}
    ports:
      - "5436:5432"
    volumes:
      - hatchet_postgres_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '4'
          memory: 8G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d hatchet -U hatchet"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  rabbitmq:
    image: "rabbitmq:3-management"
    platform: linux/amd64
    hostname: "rabbitmq"
    ports:
      - "5673:5672" # RabbitMQ
      - "15673:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - "hatchet_rabbitmq_data:/var/lib/rabbitmq"
      - "hatchet_rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5

  migration:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-migrate:v0.67.8
    platform: linux/amd64
    environment:
      DATABASE_URL: ${HATCHET_DATABASE_URL}
    depends_on:
      postgres-hatchet:
        condition: service_healthy

  setup-config:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-admin:v0.67.8
    platform: linux/amd64
    command: /hatchet/hatchet-admin quickstart --skip certs --generated-config-dir /hatchet/config --overwrite=false
    environment:
      DATABASE_URL: ${HATCHET_DATABASE_URL}
      DATABASE_POSTGRES_PORT: "5432"
      DATABASE_POSTGRES_HOST: "postgres"
      SERVER_TASKQUEUE_RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      SERVER_AUTH_COOKIE_DOMAIN: localhost:8080
      SERVER_AUTH_COOKIE_INSECURE: "t"
      SERVER_GRPC_BIND_ADDRESS: "0.0.0.0"
      SERVER_GRPC_INSECURE: "t"
      SERVER_GRPC_BROADCAST_ADDRESS: "hatchet-engine:7070"
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
    depends_on:
      migration:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      postgres-hatchet:
        condition: service_healthy

  hatchet-engine:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-engine:v0.67.8
    platform: linux/amd64
    command: /hatchet/hatchet-engine --config /hatchet/config
    restart: on-failure
    depends_on:
      setup-config:
        condition: service_completed_successfully
      migration:
        condition: service_completed_successfully
    ports:
      - "7077:7070"
    environment:
      DATABASE_URL: ${HATCHET_DATABASE_URL}
      SERVER_GRPC_BIND_ADDRESS: "0.0.0.0"
      SERVER_GRPC_INSECURE: "t"
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config

  hatchet-api:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-api:v0.67.8
    platform: linux/amd64
    command: /hatchet/hatchet-api --config /hatchet/config
    restart: on-failure
    depends_on:
      setup-config:
        condition: service_completed_successfully
      migration:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: ${HATCHET_DATABASE_URL}
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config

  hatchet-frontend:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-frontend:v0.67.8
    platform: linux/amd64
    restart: on-failure

  caddy:
    image: caddy:2.7.6-alpine
    platform: linux/amd64
    restart: on-failure
    ports:
      - 8080:8080
      - 443:443
      - 80:80
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - hatchet-api
      - hatchet-frontend

# ===== DATABASE SECTION =====
  greptile-postgres:
    image: pgvector/pgvector:pg15
    container_name: greptile-postgres-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 2s
      timeout: 5s
      retries: 10

  greptile_db_migration-job:
    image: ${ECR_REGISTRY}/db-migration-job:${TAG}
    platform: linux/amd64
    depends_on:
      greptile-postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DIRECT_URL=${DATABASE_URL}
      - VECTOR_DB_URL=${VECTOR_DB_URL}

  # ===== GREPTILE SECTION =====

  greptile_web_service:
    image: ${ECR_REGISTRY}/web:${TAG}
    platform: linux/amd64
    env_file:
      - .env
    environment:
      - AUTH_BOXYHQ_SAML_ISSUER=${AUTH_BOXYHQ_URL}
      - BILLING_ENABLED=${BILLING}
      - NEXT_PUBLIC_BILLING=${BILLING}
      - NEXT_PUBLIC_ANALYTICS=${ANALYTICS}
    ports:
      - "3000:3000"

  greptile_auth_service:
    image: ${ECR_REGISTRY}/auth:${TAG}
    platform: linux/amd64
    env_file:
      - .env
    ports:
      - "3001:3001"

  greptile_api_service:
    image: ${ECR_REGISTRY}/api:${TAG}
    platform: linux/amd64
    restart: on-failure
    env_file:
      - .env
    environment:
      - URL=${API_URL}
      - X_AWS_REGION=${AWS_REGION}
      - PORT=3002
    ports:
      - "3002:3002"

  greptile_indexer_chunker:
    image: ${ECR_REGISTRY}/chunker:${TAG}
    platform: linux/amd64
    restart: on-failure
    env_file:
      - .env
    environment:
      - PARENT_DIR=/mnt/data/
      - PORT=3003
    volumes:
      - shared-mnt:/mnt

  greptile_indexer_summarizer:
    image: ${ECR_REGISTRY}/summarizer:${TAG}
    platform: linux/amd64
    restart: on-failure
    env_file:
      - .env
    environment:
      - PARENT_DIR=/mnt/data/
      - PORT=3004
    volumes:
      - shared-mnt:/mnt

  greptile_webhook_service:
    image: ${ECR_REGISTRY}/webhook:${TAG}
    platform: linux/amd64
    restart: on-failure
    env_file:
      - .env
    environment:
      - PORT=3007
    ports:
      - "3007:3007"

  greptile_reviews_service:
    image: ${ECR_REGISTRY}/reviews:${TAG}
    platform: linux/amd64
    restart: on-failure
    env_file:
      - .env
    environment:
      - PORT=3005
    ports:
      - "3005:3005"

  greptile_jobs_service:
    image: ${ECR_REGISTRY}/jobs:${TAG}
    platform: linux/amd64
    restart: on-failure
    env_file:
      - .env
    environment:
      - X_AWS_REGION=${AWS_REGION}
      - PORT=8080
    ports:
      - "8086:8080"

volumes:
  pgdata: {}
  shared-mnt: {}
  hatchet_postgres_data: {}
  hatchet_rabbitmq_data: {}
  hatchet_rabbitmq.conf: {}
  hatchet_config: {}
  hatchet_certs: {}
  caddy_data: {}
  caddy_config: {}
