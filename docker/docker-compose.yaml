version: "3.8"

services:
  postgres:
    image: postgres:15.6
    platform: linux/amd64
    command: postgres -c 'max_connections=200'
    restart: always
    hostname: "postgres"
    environment:
      - POSTGRES_USER=hatchet
      - POSTGRES_PASSWORD=hatchet
      - POSTGRES_DB=hatchet
    ports:
      - "5436:5432"
    volumes:
      - hatchet_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d hatchet -U hatchet"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  rabbitmq:
    image: "rabbitmq:3-management"
    platform: linux/amd64
    hostname: "rabbitmq"
    ports:
      - "5673:5672" # RabbitMQ
      - "15673:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - "hatchet_rabbitmq_data:/var/lib/rabbitmq"
      - "hatchet_rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5

  migration:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-migrate:latest
    platform: linux/amd64
    environment:
      DATABASE_URL: "postgres://hatchet:hatchet@postgres:5432/hatchet"
    depends_on:
      postgres:
        condition: service_healthy

  setup-config:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-admin:latest
    platform: linux/amd64
    command: /hatchet/hatchet-admin quickstart --skip certs --generated-config-dir /hatchet/config --overwrite=false
    environment:
      DATABASE_URL: "postgres://hatchet:hatchet@postgres:5432/hatchet"
      DATABASE_POSTGRES_PORT: "5432"
      DATABASE_POSTGRES_HOST: "postgres"
      SERVER_TASKQUEUE_RABBITMQ_URL: amqp://user:password@rabbitmq:5672/
      SERVER_AUTH_COOKIE_DOMAIN: localhost:8080
      SERVER_AUTH_COOKIE_INSECURE: "t"
      SERVER_GRPC_BIND_ADDRESS: "0.0.0.0"
      SERVER_GRPC_INSECURE: "t"
      SERVER_GRPC_BROADCAST_ADDRESS: "host.docker.internal:7077"
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
    depends_on:
      migration:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy

  hatchet-engine:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-engine:latest
    platform: linux/amd64
    command: /hatchet/hatchet-engine --config /hatchet/config
    restart: on-failure
    depends_on:
      setup-config:
        condition: service_completed_successfully
      migration:
        condition: service_completed_successfully
    ports:
      - "7077:7070"
    environment:
      DATABASE_URL: "postgres://hatchet:hatchet@postgres:5432/hatchet"
      SERVER_GRPC_BIND_ADDRESS: "0.0.0.0"
      SERVER_GRPC_INSECURE: "t"
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config

  hatchet-api:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-api:latest
    platform: linux/amd64
    command: /hatchet/hatchet-api --config /hatchet/config
    restart: on-failure
    depends_on:
      setup-config:
        condition: service_completed_successfully
      migration:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: "postgres://hatchet:hatchet@postgres:5432/hatchet"
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config

  hatchet-frontend:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-frontend:latest
    platform: linux/amd64
    restart: on-failure

  caddy:
    image: caddy:2.7.6-alpine
    platform: linux/amd64
    restart: on-failure
    ports:
      - 8080:8080
      - 443:443
      - 80:80
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - hatchet-api
      - hatchet-frontend

  greptile_api_service:
    image: ${ECR_REGISTRY}/greptile/api:${TAG}
    platform: linux/amd64
    restart: on-failure
    environment:
      - LOG_FORMAT=json
      - URL=${API_URL}
      - JWT_SECRET=${JWT_SECRET}
      - TOKEN_ENCRYPTION_KEY=${TOKEN_ENCRYPTION_KEY}
      - DATABASE_USERNAME=${DB_USER}
      - DATABASE_PASSWORD=${DB_PASSWORD}
      - DATABASE_URL=${DATABASE_URL}
      - HATCHET_CLIENT_TOKEN=${HATCHET_CLIENT_TOKEN}
      - HATCHET_CLIENT_TLS_STRATEGY=${HATCHET_CLIENT_TLS_STRATEGY}
      - QUERY_URL=http://greptile_query_service:8081/query
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - BILLING=false
      - ANALYTICS=false
      - NOTIFICATIONS=false
      - NODE_ENV=production
      - X_AWS_REGION=${AWS_REGION}
      - PORT=3002
    depends_on:
      hatchet-api:
        condition: service_started
    ports:
      - "3002:3002"

  greptile_auth_service:
    image: ${ECR_REGISTRY}/greptile/auth:${TAG}
    platform: linux/amd64
    restart: on-failure
    environment:
      - LOG_FORMAT=json
      - APP_URL=${AUTH_URL}
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - EMAIL_FROM=${AUTH_EMAIL_FROM}
    ports:
      - "3001:3001"

  greptile_indexer_chunker:
    image: ${ECR_REGISTRY}/greptile/chunker:${TAG}
    platform: linux/amd64
    restart: on-failure
    environment:
      - LOG_FORMAT=json
      - HATCHET_CLIENT_TOKEN=${HATCHET_CLIENT_TOKEN}
      - HATCHET_CLIENT_TLS_STRATEGY=${HATCHET_CLIENT_TLS_STRATEGY}
      - TOKEN_ENCRYPTION_KEY=${TOKEN_ENCRYPTION_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - VECTOR_DB_USER=${DB_USER}
      - VECTOR_DB_PASSWORD=${DB_PASSWORD}
      - AWS_REGION=${AWS_REGION}
      - VECTOR_DB_PROVIDER=${VECTOR_DB_PROVIDER}
      - VECTOR_EMBEDDINGS_TABLE_NAME=embeddings
      - VECTOR_DB_NAME=vector
      - VECTOR_DB_HOST=${DB_HOST}
      - VECTOR_DB_PORT=${DB_PORT}
      - BATCH_SIZE=${BATCH_SIZE}
      - PARENT_DIR=/mnt/data/
      - PORT=3003
    depends_on:
      hatchet-engine:
        condition: service_started
    volumes:
      - shared-mnt:/mnt

  greptile_indexer_summarizer:
    image: ${ECR_REGISTRY}/greptile/summarizer:${TAG}
    platform: linux/amd64
    restart: on-failure
    environment:
      - LOG_FORMAT=json
      - BATCH_SIZE=${BATCH_SIZE}
      - PARENT_DIR=/mnt/data/
      - DATABASE_URL=${DATABASE_URL}
      - HATCHET_CLIENT_TOKEN=${HATCHET_CLIENT_TOKEN}
      - HATCHET_CLIENT_TLS_STRATEGY=${HATCHET_CLIENT_TLS_STRATEGY}
      - TOKEN_ENCRYPTION_KEY=${TOKEN_ENCRYPTION_KEY}
      - VECTOR_DB_USER=${DB_USER}
      - VECTOR_DB_PASSWORD=${DB_PASSWORD}
      - VECTOR_DB_PROVIDER=${VECTOR_DB_PROVIDER}
      - VECTOR_EMBEDDINGS_TABLE_NAME=embeddings
      - VECTOR_DB_NAME=vector
      - VECTOR_DB_HOST=${DB_HOST}
      - VECTOR_DB_PORT=${DB_PORT}
      - PORT=3004
      - SUMMARIZER_MODEL_PROVIDER=${SUMMARIZER_MODEL_PROVIDER}
      - SUMMARIZER_MODEL=${SUMMARIZER_MODEL}
      - EMBEDDINGS_MODEL_PROVIDER=${EMBEDDINGS_MODEL_PROVIDER}
      - EMBEDDINGS_MODEL=${EMBEDDINGS_MODEL}
      - AWS_REGION=${AWS_REGION}
      - AZURE_OPENAI_KEY=${AZURE_OPENAI_KEY}
      - AZURE_OPENAI_URL=${AZURE_OPENAI_URL}
      - AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME=${AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME}
      - AZURE_OPENAI_EMBEDDINGS_API_VERSION=${AZURE_OPENAI_EMBEDDINGS_API_VERSION}
    volumes:
      - shared-mnt:/mnt

  greptile_query_service:
    image: ${ECR_REGISTRY}/greptile/query:${TAG}
    platform: linux/amd64
    restart: on-failure
    environment:
      - LOG_FORMAT=json
      - VECTOR_DB_USER=${DB_USER}
      - VECTOR_DB_PASSWORD=${DB_PASSWORD}
      - DATABASE_URL=${DATABASE_URL}
      - PORT=8081
      - ONPREM=true
      - AWS_REGION=${AWS_REGION}
      - NOTIFICATIONS=${NOTIFICATIONS_ENABLED}
      - ANALYTICS=${ANALYTICS_ENABLED}
      - DEFAULT_AGENT_MODEL=${AGENT_MODEL}
      - DEFAULT_CHAT_MODEL=${CHAT_MODEL}
      - DEFAULT_EMBEDDING_MODEL=${EMBEDDINGS_MODEL}
      - AGENT_MODEL_PROVIDER=${AGENT_MODEL_PROVIDER}
      - CHAT_MODEL_PROVIDER=${CHAT_MODEL_PROVIDER}
      - EMBEDDINGS_MODEL=${EMBEDDINGS_MODEL}
      - EMBEDDINGS_MODEL_PROVIDER=${EMBEDDINGS_MODEL_PROVIDER}
      - VECTOR_DB_PROVIDER=${VECTOR_DB_PROVIDER}
      - VECTOR_EMBEDDINGS_TABLE_NAME=embeddings
      - VECTOR_DB_NAME=vector
      - VECTOR_DB_HOST=${DB_HOST}
      - VECTOR_DB_PORT=${DB_PORT}
      - AZURE_OPENAI_KEY=${AZURE_OPENAI_KEY}
      - AZURE_OPENAI_URL=${AZURE_OPENAI_URL}
      - AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME=${AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME}
      - AZURE_OPENAI_EMBEDDINGS_API_VERSION=${AZURE_OPENAI_EMBEDDINGS_API_VERSION}
    ports:
      - "8081:8081"

  greptile_web_service:
    image: ${ECR_REGISTRY}/greptile/web:${TAG}
    platform: linux/amd64
    restart: on-failure
    environment:
      - AUTH_SECRET=${JWT_SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - DIRECT_URL=${DATABASE_URL}
      - AUTH_BOXYHQ_SAML_ID=${SAML_ID}
      - AUTH_BOXYHQ_SAML_SECRET=${SAML_SECRET}
      - AUTH_BOXYHQ_API_KEY=${BOXYHQ_API_KEY}
      - PORT=3000
      - NEXTAUTH_URL=${WEB_URL}
      - APP_URL=${WEB_URL}
      - EMAIL_PROVIDER=${EMAIL_PROVIDER}
      - BILLING_ENABLED=${BILLING_ENABLED}
      - AUTH_SAML_ONLY=${AUTH_SAML_ONLY}
      - AUTH_EMAIL_FROM=${AUTH_EMAIL_FROM}
      - GREPTILE_AUTH_SERVER=${AUTH_URL}
      - GREPTILE_API_URL=${API_URL}
      - AUTH_BOXYHQ_URL=${BOXYHQ_URL}
      - AUTH_BOXYHQ_SAML_ISSUER=${BOXYHQ_URL}
      - GITHUB_APP_URL=${GITHUB_APP_URL}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - GITHUB_WEBHOOK_URL=${GITHUB_WEBHOOK_URL}
      - GITHUB_ENTERPRISE_URL=${GITHUB_ENTERPRISE_URL}
      - GITHUB_ENTERPRISE_API_URL=${GITHUB_ENTERPRISE_API_URL}
      - GITHUB_ENTERPRISE_APP_URL=${GITHUB_ENTERPRISE_APP_URL}
      - GITHUB_ENTERPRISE_APP_ID=${GITHUB_ENTERPRISE_APP_ID}
      - GITHUB_ENTERPRISE_APP_PRIVATE_KEY=${GITHUB_ENTERPRISE_APP_PRIVATE_KEY}
      - GITHUB_ENTERPRISE_CLIENT_ID=${GITHUB_ENTERPRISE_CLIENT_ID}
      - GITHUB_ENTERPRISE_CLIENT_SECRET=${GITHUB_ENTERPRISE_CLIENT_SECRET}
      - GITHUB_OAUTH_ENABLED=${GITHUB_OAUTH_ENABLED}
      - AUTH_GITHUB_ID=${GITHUB_ENTERPRISE_CLIENT_ID}
      - AUTH_GITHUB_SECRET=${GITHUB_ENTERPRISE_CLIENT_SECRET}
      - GITHUB_ENABLED=${GITHUB_ENABLED}
      - GITHUB_ENTERPRISE_ENABLED=${GITHUB_ENTERPRISE_ENABLED}
      - GITLAB_ENABLED=${GITLAB_ENABLED}
      - SLACK_ENABLED=${SLACK_ENABLED}
      - LINEAR_ENABLED=${LINEAR_ENABLED}
      - SUPPORT_EMAIL=${SUPPORT_EMAIL}
      - HIDE_SOCIALS=${HIDE_SOCIALS}
    ports:
      - "3000:3000"

  greptile_github_service:
    image: ${ECR_REGISTRY}/greptile/github:${TAG}
    platform: linux/amd64
    restart: on-failure
    environment:
      - LOG_FORMAT=json
      - PORT=3010
      - GITHUB_APP_ID=${GITHUB_APP_ID}
      - GITHUB_APP_URL=${GITHUB_APP_URL}
      - GITHUB_BOT_LOGIN=greptile-onprem
      - GITHUB_BOT_USERNAME=greptile-onprem[bot]
      - GREPTILE_API_URL=${API_URL}
      - AWS_REGION=${AWS_REGION}
      - DATABASE_URL=${DATABASE_URL}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET}
      - GITHUB_PRIVATE_KEY=${GITHUB_PRIVATE_KEY}
      - ENTERPRISE_URL=${GITHUB_ENTERPRISE_URL}
      - NOTIFICATIONS=${NOTIFICATIONS_ENABLED}
      - ANALYTICS=${ANALYTICS_ENABLED}
      - BILLING=${BILLING_ENABLED}
      - REFINER_MODEL_PROVIDER=${REFINER_MODEL_PROVIDER}
      - REFINER_MODEL=${REFINER_MODEL}
      - EMBEDDINGS_MODEL_PROVIDER=${EMBEDDINGS_MODEL_PROVIDER}
      - EMBEDDINGS_MODEL=${EMBEDDINGS_MODEL}
      - AZURE_OPENAI_KEY=${AZURE_OPENAI_KEY}
      - AZURE_OPENAI_URL=${AZURE_OPENAI_URL}
      - AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME=${AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME}
      - AZURE_OPENAI_EMBEDDINGS_API_VERSION=${AZURE_OPENAI_EMBEDDINGS_API_VERSION}
    ports:
      - "3010:3010"

  greptile_vector_db_migration:
    image: ${ECR_REGISTRY}/greptile/vectordb-migration:${TAG}
    platform: linux/amd64
    environment:
      - BASE_DB_URL=${DATABASE_URL}
      - VECTOR_DB_URL=${DATABASE_URL}/vector
    command: >
      /bin/sh -c '
      cd /app/packages/vector &&
      echo "Starting migration..." &&
      export DATABASE_URL=$BASE_DB_URL &&
      export DIRECT_URL=$BASE_DB_URL &&
      pnpm prisma db execute --file ./scripts/create.sql &&
      export DATABASE_URL=$VECTOR_DB_URL &&
      export DIRECT_URL=$VECTOR_DB_URL &&
      pnpm prisma db execute --file ./scripts/pgvector.sql &&
      if pnpm prisma migrate deploy; then
        echo "Migration completed successfully" &&
        exit 0
      else
        echo "Migration failed" &&
        exit 1
      fi'
    depends_on:
      postgres:
        condition: service_healthy

  greptile_db_migration:
    image: ${ECR_REGISTRY}/greptile/db-migration:${TAG}
    platform: linux/amd64
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DIRECT_URL=${DATABASE_URL}
      - ORG_NAME=greptile
      - TENANT_ID=default
    command: >
      /bin/sh -c '
      cd /app/packages/db &&
      echo "Starting migration..." &&
      pnpm prisma db execute --file ./scripts/create.sql &&
      pnpm prisma db execute --file ./scripts/hatchet.sql &&
      if pnpm prisma migrate deploy; then
        echo "Migration completed successfully" &&
        API_KEY=$(openssl rand -base64 32) &&
        sed "s|\$ORG_NAME|$ORG_NAME|g; s|\$TENANT_ID|$TENANT_ID|g; s|\$API_KEY|$API_KEY|g" ./scripts/root_org.sql > /tmp/processed.sql &&
        cat /tmp/processed.sql | pnpm prisma db execute --stdin || {
          echo "Failed to execute root_org.sql" &&
          cat /tmp/processed.sql &&
          exit 1
        } &&
        exit 0
      else
        echo "Migration failed" &&
        exit 1
      fi'
    depends_on:
      postgres:
        condition: service_healthy

  greptile_jackson_service:
    image: boxyhq/jackson
    hostname: greptile_jackson_service
    platform: linux/amd64
    restart: on-failure
    environment:
      - DB_ENCRYPTION_KEY=${JACKSON_DB_ENCRYPTION_KEY}
      - HOST_URL=${JACKSON_HOST_URL}
      - EXTERNAL_URL=${JACKSON_EXTERNAL_URL}
      - JACKSON_API_KEYS=${BOXYHQ_API_KEY}
      - SAML_AUDIENCE=${SAML_ID}
      - CLIENT_SECRET_VERIFIER=${SAML_SECRET}
      - NEXTAUTH_ADMIN_CREDENTIALS=${JACKSON_ADMIN_CREDENTIALS}
      - PUBLIC_KEY=${JACKSON_PUBLIC_KEY}
      - PRIVATE_KEY=${JACKSON_PRIVATE_KEY}
      - NEXTAUTH_URL=${BOXYHQ_URL}
      - NEXTAUTH_SECRET=${JWT_SECRET}
      - IDP_ENABLED=${JACKSON_IDP_ENABLED:-true}
      - DB_URL=${DATABASE_URL}
      - DB_ENGINE=sql
      - DB_TYPE=postgres
      - DB_SSL_REJECT_UNAUTHORIZED=false
      - DB_SSL=true
      - PORT=5225
      - AWS_REGION=${AWS_REGION}
      - DO_NOT_TRACK=1
    ports:
      - "5225:5225"
    # depends_on:
    #   greptile_db_migration:
    #     condition: service_completed_successfully

volumes:
  shared-mnt:
  hatchet_postgres_data:
  hatchet_rabbitmq_data:
  hatchet_rabbitmq.conf:
  hatchet_config:
  hatchet_certs:
  caddy_data:
  caddy_config:
