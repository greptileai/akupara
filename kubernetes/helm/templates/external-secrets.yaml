apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-weight": "-11"
    {{- if .Values.aws.irsa.secrets }}
    eks.amazonaws.com/role-arn: {{ .Values.aws.irsa.secrets.role }}
    {{- end }}
  name: external-secrets-sa
  namespace: {{ .Release.Namespace }}
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: greptile-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-weight": "-10"
spec:
  provider:
    aws:
      service: SecretsManager
      region: {{ .Values.global.region }}
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-sa
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-secrets
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-weight": "-9"
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: {{ .Values.global.secrets.store }}
    kind: SecretStore
  target:
    name: database-secrets
    template:
      engineVersion: v2
      data:
        username: "{{ `{{ .username }}` }}"
        password: "{{ `{{ .password }}` }}"
        url: 'postgresql://{{ `{{ .username }}` }}:{{ `{{ urlquery .password }}` }}@{{ .Values.database.env.host }}:{{ .Values.database.env.port }}/{{ .Values.database.env.name }}'
        vectorDbUrl: 'postgresql://{{ `{{ .username }}` }}:{{ `{{ urlquery .password }}` }}@{{ .Values.database.env.host }}:{{ .Values.database.env.port }}/vector'
  data:
    - secretKey: username
      remoteRef:
        key: {{ .Values.global.secrets.external.keys.database }}
        property: username
    - secretKey: password
      remoteRef:
        key: {{ .Values.global.secrets.external.keys.database }}
        property: password
---
{{- if .Values.global.secrets.external.keys.llm }}
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: llm-secrets
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-weight": "-9"
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: {{ .Values.global.secrets.store }}
    kind: SecretStore
  target:
    name: llm-secrets
  data:
    - secretKey: openai-key
      remoteRef:
        key: {{ .Values.global.secrets.external.keys.llm }}
        property: openai-key
    - secretKey: anthropic-key
      remoteRef:
        key: {{ .Values.global.secrets.external.keys.llm }}
        property: anthropic-key
{{- end }}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: github-secrets
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-weight": "-9"
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: {{ .Values.global.secrets.store }}
    kind: SecretStore
  target:
    name: github-secrets
  data:
    - secretKey: clientId
      remoteRef:
        key: {{ .Values.global.secrets.external.keys.github }}
        property: clientId
    - secretKey: clientSecret
      remoteRef:
        key: {{ .Values.global.secrets.external.keys.github }}
        property: clientSecret
    - secretKey: webhookSecret
      remoteRef:
        key: {{ .Values.global.secrets.external.keys.github }}
        property: webhookSecret
    - secretKey: privateKey
      remoteRef:
        key: {{ .Values.global.secrets.external.keys.github }}
        property: privateKey
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: app-secrets
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-weight": "-9"
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: {{ .Values.global.secrets.store }}
    kind: SecretStore
  target:
    name: app-secrets
  data:
    - secretKey: jwtSecret
      remoteRef:
        key: {{ .Values.global.secrets.external.keys.app }}
        property: jwtSecret
    - secretKey: tokenEncryptionKey
      remoteRef:
        key: {{ .Values.global.secrets.external.keys.app }}
        property: tokenEncryptionKey
    - secretKey: jacksonAdminCredentials
      remoteRef:
        key: {{ .Values.global.secrets.external.keys.app }}
        property: jacksonAdminCredentials
    - secretKey: jacksonClientSecretVerifier
      remoteRef:
        key: {{ .Values.global.secrets.external.keys.app }}
        property: jacksonClientSecretVerifier
    - secretKey: jacksonDbEncryptionKey
      remoteRef:
        key: {{ .Values.global.secrets.external.keys.app }}
        property: jacksonDbEncryptionKey
    - secretKey: jacksonPrivateKey
      remoteRef:
        key: {{ .Values.global.secrets.external.keys.app }}
        property: jacksonPrivateKey
    - secretKey: jacksonPublicKey
      remoteRef:
        key: {{ .Values.global.secrets.external.keys.app }}
        property: jacksonPublicKey
    - secretKey: boxyhqSamlId
      remoteRef:
        key: {{ .Values.global.secrets.external.keys.app }}
        property: boxyhqSamlId
    - secretKey: boxyhqApiKey
      remoteRef:
        key: {{ .Values.global.secrets.external.keys.app }}
        property: boxyhqApiKey

